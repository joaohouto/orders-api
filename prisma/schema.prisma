generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?
  avatar   String?
  phone    String?
  document String?

  stores             Store[]              @relation("OwnerStores")
  collaborations     Collaborator[]
  orders             Order[]
  OrderStatusHistory OrderStatusHistory[]
  files              File[]
}

model Store {
  id        String  @id @default(cuid())
  name      String
  slug      String  @unique
  instagram String?
  icon      String?
  banner    String?

  ownerId String
  owner   User   @relation("OwnerStores", fields: [ownerId], references: [id])

  collaborators Collaborator[]

  products Product[] // editado pelo jo√£o

  createdAt DateTime @default(now())
  orders    Order[]
  files     File[]
}

model Collaborator {
  id      String    @id @default(cuid())
  store   Store     @relation(fields: [storeId], references: [id])
  storeId String
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  role    StoreRole

  @@unique([storeId, userId])
}

enum StoreRole {
  VIEW
  EDIT
  OWNER
}

model Product {
  id              String      @id @default(cuid())
  name            String
  slug            String      @unique
  description     String?
  images          String[]
  storeId         String
  store           Store       @relation(fields: [storeId], references: [id])
  variations      Variation[]
  acceptOrderNote Boolean     @default(false)
  isActive        Boolean     @default(true)
  deletedAt       DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  files      File[]
  orderItems OrderItem[]
}

model Variation {
  id        String    @id @default(cuid())
  name      String // Ex: P, M, G
  price     Decimal
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  deletedAt DateTime?
}

model Order {
  id String @id @default(cuid())

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  status        OrderStatus          @default(PENDING)
  items         OrderItem[]
  totalPrice    Decimal              @default(0)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  statusHistory OrderStatusHistory[]
}

model OrderItem {
  id String @id @default(cuid())

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  variationId String

  productName   String
  variationName String
  unitPrice     Decimal
  quantity      Int
  note          String?
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PRODUCTION
  READY
  DELIVERED
  CANCELED
}

model OrderStatusHistory {
  id          String      @id @default(cuid())
  order       Order       @relation(fields: [orderId], references: [id])
  orderId     String
  status      OrderStatus
  changedBy   User        @relation(fields: [changedById], references: [id])
  changedById String
  createdAt   DateTime    @default(now())
}

model File {
  id           String   @id @default(cuid())
  url          String
  key          String
  storeId      String?
  productId    String?
  uploadedById String?
  createdAt    DateTime @default(now())

  store      Store?   @relation(fields: [storeId], references: [id])
  product    Product? @relation(fields: [productId], references: [id])
  uploadedBy User?    @relation(fields: [uploadedById], references: [id])
}
